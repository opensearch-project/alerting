name: Multi node test workflow
# This workflow is triggered on pull requests to main
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        java: [ 14 ]
    # Job name
    name: Build Alerting
    # This job runs on Linux
    runs-on: ubuntu-latest
    steps:
      # This step uses the setup-java Github action: https://github.com/actions/setup-java
      - name: Set Up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      # This step adds dependency, OpenSearch
      - name: Checkout OpenSearch
        uses: actions/checkout@v2
        with:
          repository: 'opensearch-project/OpenSearch'
          path: OpenSearch
          ref: '1.0'
      - name: Build OpenSearch
        working-directory: ./OpenSearch
        run: ./gradlew publishToMavenLocal -Dbuild.version_qualifier=rc1 -Dbuild.snapshot=false
      # This step adds dependency, common-utils
      - name: Checkout common-utils
        uses: actions/checkout@v2
        with:
          repository: 'opensearch-project/common-utils'
          path: common-utils
          ref: 'main'
      - name: Build common-utils
        working-directory: ./common-utils
        run: ./gradlew publishToMavenLocal -Dopensearch.version=1.0.0-rc1
      # This step uses the checkout Github action: https://github.com/actions/checkout
      - name: Checkout Branch
        uses: actions/checkout@v2
      # This step uses the setup-java Github action: https://github.com/actions/setup-java
      - name: Set Up JDK 14
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Run integration tests with multi node config
        run: ./gradlew integTest -PnumNodes=3 -Dopensearch.version=1.0.0-rc1 -Dbuild.snapshot=false
      - name: Pull and Run Docker
        run: |
          plugin=`ls alerting/build/distributions/*.zip`
          list_of_files=`ls`
          list_of_all_files=`ls alerting/build/distributions/`
          version=`echo $plugin|awk -F- '{print $3}'| cut -d. -f 1-3`
          plugin_version=`echo $plugin|awk -F- '{print $3}'| cut -d. -f 1-4`
          candidate_version=`echo $plugin|awk -F- '{print $4}'| cut -d. -f 1-1`
          echo $version $plugin_version $candidate_version
          echo $ls $list_of_all_files

          if docker pull opensearchstaging/opensearch:$version-$candidate_version
          then
            echo "FROM opensearchstaging/opensearch:$version-$candidate_version" >> Dockerfile
            echo "RUN if [ -d /usr/share/opensearch/plugins/opensearch-alerting ]; then /usr/share/opensearch/bin/opensearch-plugin remove opensearch-alerting; fi" >> Dockerfile
            echo "ADD alerting/build/distributions/opensearch-alerting-$plugin_version-$candidate_version.zip /tmp/" >> Dockerfile
            echo "RUN /usr/share/opensearch/bin/opensearch-plugin install --batch file:/tmp/opensearch-alerting-$plugin_version-$candidate_version.zip" >> Dockerfile

            docker build -t opensearch-alerting:test .
            echo "imagePresent=true" >> $GITHUB_ENV
          else
            echo "imagePresent=false" >> $GITHUB_ENV
          fi

      - name: Run Docker Image
        if: env.imagePresent == 'true'
        run: |
          cd ..
          docker run -p 9200:9200 -d -p 9600:9600 -e "discovery.type=single-node" opensearch-alerting:test
          sleep 120

      - name: Run Alerting Test for security enabled test cases
        if: env.imagePresent == 'true'
        run: |
          cluster_running=`curl -XGET https://localhost:9200/_cat/plugins -u admin:admin --insecure`
          echo $cluster_running
          security=`curl -XGET https://localhost:9200/_cat/plugins -u admin:admin --insecure |grep opensearch-security|wc -l`
          echo $security
          if [ $security -gt 0 ]
          then
            echo "Security plugin is available"
            ./gradlew :alerting:integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=docker-cluster -Dsecurity=true -Dhttps=true -Duser=admin -Dpassword=admin
          else
            echo "Security plugin is NOT available skipping this run as tests without security have already been run"
          fi
