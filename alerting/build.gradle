/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import java.util.concurrent.Callable
import org.opensearch.gradle.test.RestIntegTestTask
import org.opensearch.gradle.testclusters.StandaloneRestIntegTestTask

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.pluginzip'
apply plugin: 'jacoco'

def usingRemoteCluster = System.properties.containsKey('tests.rest.cluster') || System.properties.containsKey('tests.cluster')
def usingMultiNode = project.properties.containsKey('numNodes')

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

opensearchplugin {
    name 'opensearch-alerting'
    description 'Amazon OpenSearch alerting plugin'
    classname 'org.opensearch.alerting.AlertingPlugin'
    extendedPlugins = ['lang-painless']
}

publishing {
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
                name = "opensearch-alerting"
                description = "OpenSearch Alerting plugin"
                groupId = "org.opensearch.plugin"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "OpenSearch"
                        url = "https://github.com/opensearch-project/alerting"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "Snapshots"
            url = "https://aws.oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username "$System.env.SONATYPE_USERNAME"
                password "$System.env.SONATYPE_PASSWORD"
            }
        }
    }
}

// Prefer elastic bundled versions for conflicts (primarily with AWS SDK).  We need to specify these manually because
// opensearchplugin sets ResolutionStrategy.failOnVersionConflict. Luckily it is also nice enough to expose (most of) the
// versions it uses in ext.versions.

configurations.all {
    if (it.state != Configuration.State.UNRESOLVED) return
    resolutionStrategy {
        force "joda-time:joda-time:${versions.joda}"
        force "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
        force "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"
        force "commons-logging:commons-logging:${versions.commonslogging}"
        force "org.apache.httpcomponents:httpcore:${versions.httpcore}"
        // force the version until OpenSearch upgrade to an invulnerable one, https://www.whitesourcesoftware.com/vulnerability-database/WS-2019-0379
        force "commons-codec:commons-codec:1.13"
        
        // This is required because kotlin-coroutines-core 1.1.1 still requires kotlin stdlib 1.3.20 and we're using a higher kotlin version
        force "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
        force "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    }
}

configurations.testImplementation {
    exclude module: "securemock"
}

configurations {
    zipArchive
}

dependencies {
    // Needed for integ tests
    zipArchive group: 'org.opensearch.plugin', name:'opensearch-notifications-core', version: "${opensearch_build}"
    zipArchive group: 'org.opensearch.plugin', name:'notifications', version: "${opensearch_build}"

    compileOnly "org.opensearch.plugin:opensearch-scripting-painless-spi:${versions.opensearch}"
    api "org.opensearch.plugin:percolator-client:${opensearch_version}"

    // OpenSearch Nanny state
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    implementation "org.jetbrains:annotations:13.0"

    api project(":alerting-core")
    implementation "com.github.seancfoley:ipaddress:5.3.3"

    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.opensearch.plugin:reindex-client:${opensearch_version}"
    testImplementation "org.opensearch.plugin:parent-join-client:${opensearch_version}"
}

javadoc.enabled = false // turn off javadoc as it barfs on Kotlin code
licenseHeaders.enabled = true
dependencyLicenses.enabled = false
// no need to validate pom, as this project is not uploaded to sonatype
validateNebulaPom.enabled = false
thirdPartyAudit.enabled = false

loggerUsageCheck.enabled = false

def opensearch_tmp_dir = rootProject.file('build/private/opensearch_tmp').absoluteFile
opensearch_tmp_dir.mkdirs()

test {
    systemProperty 'tests.security.manager', 'false'
}

task integTest(type: RestIntegTestTask) {
    description = "Run integration tests against integTest cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }
Zip bundle = (Zip) project.getTasks().getByName("bundlePlugin");
integTest.dependsOn(bundle)
integTest.getClusters().forEach{c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile()))}

def _numNodes = findProperty('numNodes') as Integer ?: 1

testClusters.integTest {
    testDistribution = "ARCHIVE"
    // Cluster shrink exception thrown if we try to set numberOfNodes to 1, so only apply if > 1
    if (_numNodes > 1) numberOfNodes = _numNodes
    // When running integration tests it doesn't forward the --debug-jvm to the cluster anymore
    // i.e. we have to use a custom property to flag when we want to debug opensearch JVM
    // since we also support multi node integration tests we increase debugPort per node
    if (System.getProperty("cluster.debug") != null) {
        def debugPort = 5005
        nodes.forEach { node ->
            node.jvmArgs("-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=${debugPort}")
            debugPort += 1
        }
    }

    plugin(provider({
        new RegularFile() {
            @Override
            File getAsFile() {
                return configurations.zipArchive.asFileTree.matching {
                    include '**/opensearch-notifications-core*'
                }.singleFile
            }
        }
    }))

    plugin(provider({
        new RegularFile() {
            @Override
            File getAsFile() {
                return configurations.zipArchive.asFileTree.matching {
                    include '**/notifications*'
                }.singleFile
            }
        }
    }))
}

testClusters.integTest.nodes.each { node ->
    node.setting("plugins.destination.host.deny_list", "[\"10.0.0.0/8\", \"127.0.0.1\"]")
}

integTest {
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', opensearch_tmp_dir.absolutePath

    systemProperty "https", System.getProperty("https")
    systemProperty "security", System.getProperty("security")
    systemProperty "user", System.getProperty("user")
    systemProperty "password", System.getProperty("password")

    // The 'doFirst' delays till execution time.
    doFirst {
        // Tell the test JVM if the cluster JVM is running under a debugger so that tests can
        // use longer timeouts for requests.
        def isDebuggingCluster = getDebug() || System.getProperty("test.debug") != null
        systemProperty 'cluster.debug', isDebuggingCluster
        // Set number of nodes system property to be used in tests
        systemProperty 'cluster.number_of_nodes', "${_numNodes}"
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            cluster.waitForAllConditions()
        }
    }

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=8000'
    }

    if (System.getProperty("tests.rest.bwcsuite") == null) {
        filter {
            excludeTestsMatching "org.opensearch.alerting.bwc.*IT"
        }
    }
}

task integTestRemote(type: RestIntegTestTask) {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', opensearch_tmp_dir.absolutePath

    systemProperty "https", System.getProperty("https")
    systemProperty "security", System.getProperty("security")
    systemProperty "user", System.getProperty("user")
    systemProperty "password", System.getProperty("password")

    if (System.getProperty("tests.rest.cluster") != null) {
        filter {
            includeTestsMatching "org.opensearch.alerting.resthandler.*IT"
        }
    }

    if (System.getProperty("https") == null || System.getProperty("https") == "false") {
        filter {
            excludeTestsMatching "org.opensearch.alerting.resthandler.Secure*IT"
        }
    }
}
integTestRemote.enabled = System.getProperty("tests.rest.cluster") != null

String bwcMinVersion = "1.1.0.0"
String bwcBundleVersion = "1.3.2.0"
Boolean bwcBundleTest = (project.findProperty('customDistributionDownloadType') != null &&
        project.properties['customDistributionDownloadType'] == "bundle");
String bwcVersion = bwcBundleTest ? bwcBundleVersion : bwcMinVersion
String bwcCurrentVersion = opensearch_version.replace("-SNAPSHOT", "")
String baseName = "alertingBwcCluster"
String bwcFilePath = "src/test/resources/bwc"
String bwcOpenSearchPlugin = "opensearch-alerting-" + bwcVersion + ".zip"
String bwcRemoteFile = 'https://ci.opensearch.org/ci/dbc/bundle-build/1.1.0/20210930/linux/x64/builds/opensearch/plugins/' + bwcOpenSearchPlugin

2.times {i ->
    testClusters {
        "${baseName}$i" {
            testDistribution = "ARCHIVE"
            numberOfNodes = 3
            if (bwcBundleTest) {
                versions = ["1.3.2", bwcCurrentVersion]
                nodes.each { node ->
                    node.extraConfigFile("kirk.pem", file("src/test/resources/kirk.pem"))
                    node.extraConfigFile("kirk-key.pem", file("src/test/resources/kirk-key.pem"))
                    node.extraConfigFile("esnode.pem", file("src/test/resources/esnode.pem"))
                    node.extraConfigFile("esnode-key.pem", file("src/test/resources/esnode-key.pem"))
                    node.extraConfigFile("root-ca.pem", file("src/test/resources/root-ca.pem"))
                    node.setting("plugins.security.disabled", "true")
                    node.setting("plugins.security.ssl.transport.pemcert_filepath", "esnode.pem")
                    node.setting("plugins.security.ssl.transport.pemkey_filepath", "esnode-key.pem")
                    node.setting("plugins.security.ssl.transport.pemtrustedcas_filepath", "root-ca.pem")
                    node.setting("plugins.security.ssl.transport.enforce_hostname_verification", "false")
                    node.setting("plugins.security.ssl.http.enabled", "true")
                    node.setting("plugins.security.ssl.http.pemcert_filepath", "esnode.pem")
                    node.setting("plugins.security.ssl.http.pemkey_filepath", "esnode-key.pem")
                    node.setting("plugins.security.ssl.http.pemtrustedcas_filepath", "root-ca.pem")
                    node.setting("plugins.security.allow_unsafe_democertificates", "true")
                    node.setting("plugins.security.allow_default_init_securityindex", "true")
                    node.setting("plugins.security.authcz.admin_dn", "CN=kirk,OU=client,O=client,L=test,C=de")
                    node.setting("plugins.security.audit.type", "internal_elasticsearch")
                    node.setting("plugins.security.enable_snapshot_restore_privilege", "true")
                    node.setting("plugins.security.check_snapshot_restore_write_privileges", "true")
                    node.setting("plugins.security.restapi.roles_enabled", "[\"all_access\", \"security_rest_api_access\"]")
                    node.setting("plugins.security.system_indices.enabled", "true")
                }
            } else {
                versions = ["1.1.0", opensearch_version]
                plugin(provider(new Callable<RegularFile>(){
                    @Override
                    RegularFile call() throws Exception {
                        return new RegularFile() {
                            @Override
                            File getAsFile() {
                                File dir = new File(rootDir.path + "/alerting/" + bwcFilePath + "/alerting/" + bwcVersion)

                                if (!dir.exists()) {
                                    dir.mkdirs()
                                }
                                File f = new File(dir, bwcOpenSearchPlugin)
                                if (!f.exists()) {
                                    new URL(bwcRemoteFile).withInputStream{ ins -> f.withOutputStream{ it << ins }}
                                }
                                return fileTree(bwcFilePath + "/alerting/" + bwcVersion).getSingleFile()
                            }
                        }
                    }
                }))
            }
            setting 'path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
            setting 'http.content_type.required', 'true'
        }
    }
}

List<Provider<RegularFile>> plugins = []

// Ensure the artifact for the current project version is available to be used for the bwc tests
task prepareBwcTests {
    dependsOn bundle
    doLast {
        plugins = [
                project.getObjects().fileProperty().value(bundle.getArchiveFile()),
                provider({
                    new RegularFile() {
                        @Override
                        File getAsFile() {
                            return configurations.zipArchive.asFileTree.matching {
                                include '**/opensearch-notifications-core*'
                            }.singleFile
                        }
                    }
                }),
                provider({
                    new RegularFile() {
                        @Override
                        File getAsFile() {
                            return configurations.zipArchive.asFileTree.matching {
                                include '**/notifications*'
                            }.singleFile
                        }
                    }
                })
        ]
    }
}

// Create two test clusters with 3 nodes of the old version
2.times {i ->
    task "${baseName}#oldVersionClusterTask$i"(type: StandaloneRestIntegTestTask) {
        if (!bwcBundleTest){
            dependsOn 'prepareBwcTests'
        }
        useCluster testClusters."${baseName}$i"
        filter {
            includeTestsMatching "org.opensearch.alerting.bwc.*IT"
        }
        systemProperty 'tests.rest.bwcsuite', 'old_cluster'
        systemProperty 'tests.rest.bwcsuite_round', 'old'
        systemProperty 'tests.plugin_bwc_version', bwcVersion
        nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}$i".allHttpSocketURI.join(",")}")
        nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}$i".getName()}")
    }
}

// Upgrade one node of the old cluster to new OpenSearch version with upgraded plugin version.
// This results in a mixed cluster with 2 nodes on the old version and 1 upgraded node.
// This is also used as a one third upgraded cluster for a rolling upgrade.
task "${baseName}#mixedClusterTask"(type: StandaloneRestIntegTestTask) {
    useCluster testClusters."${baseName}0"
    dependsOn "${baseName}#oldVersionClusterTask0"
    if (bwcBundleTest){
        doFirst {
            testClusters."${baseName}0".nextNodeToNextVersion()
        }
    } else {
        doFirst {
            testClusters."${baseName}0".upgradeNodeAndPluginToNextVersion(plugins)
        }
    }
    filter {
        includeTestsMatching "org.opensearch.alerting.bwc.*IT"
    }
    systemProperty 'tests.rest.bwcsuite', 'mixed_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'first'
    systemProperty 'tests.plugin_bwc_version', bwcVersion
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}0".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}0".getName()}")
}

// Upgrade the second node to new OpenSearch version with upgraded plugin version after the first node is upgraded.
// This results in a mixed cluster with 1 node on the old version and 2 upgraded nodes.
// This is used for rolling upgrade.
task "${baseName}#twoThirdsUpgradedClusterTask"(type: StandaloneRestIntegTestTask) {
    dependsOn "${baseName}#mixedClusterTask"
    useCluster testClusters."${baseName}0"
    if (bwcBundleTest){
        doFirst {
            testClusters."${baseName}0".nextNodeToNextVersion()
        }
    } else {
        doFirst {
            testClusters."${baseName}0".upgradeNodeAndPluginToNextVersion(plugins)
        }
    }
    filter {
        includeTestsMatching "org.opensearch.alerting.bwc.*IT"
    }
    systemProperty 'tests.rest.bwcsuite', 'mixed_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'second'
    systemProperty 'tests.plugin_bwc_version', bwcVersion
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}0".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}0".getName()}")
}

// Upgrade the third node to new OpenSearch version with upgraded plugin version after the second node is upgraded.
// This results in a fully upgraded cluster.
// This is used for rolling upgrade.
task "${baseName}#rollingUpgradeClusterTask"(type: StandaloneRestIntegTestTask) {
    dependsOn "${baseName}#twoThirdsUpgradedClusterTask"
    useCluster testClusters."${baseName}0"
    if (bwcBundleTest){
        doFirst {
            testClusters."${baseName}0".nextNodeToNextVersion()
        }
    } else {
        doFirst {
            testClusters."${baseName}0".upgradeNodeAndPluginToNextVersion(plugins)
        }
    }
    filter {
        includeTestsMatching "org.opensearch.alerting.bwc.*IT"
    }
    mustRunAfter "${baseName}#mixedClusterTask"
    systemProperty 'tests.rest.bwcsuite', 'mixed_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'third'
    systemProperty 'tests.plugin_bwc_version', bwcVersion
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}0".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}0".getName()}")
}

// Upgrade all the nodes of the old cluster to new OpenSearch version with upgraded plugin version
// at the same time resulting in a fully upgraded cluster.
task "${baseName}#fullRestartClusterTask"(type: StandaloneRestIntegTestTask) {
    dependsOn "${baseName}#oldVersionClusterTask1"
    useCluster testClusters."${baseName}1"
    if (bwcBundleTest){
        doFirst {
            testClusters."${baseName}1".goToNextVersion()
        }
    } else {
        doFirst {
            testClusters."${baseName}1".upgradeAllNodesAndPluginsToNextVersion(plugins)
        }
    }
    filter {
        includeTestsMatching "org.opensearch.alerting.bwc.*IT"
    }
    systemProperty 'tests.rest.bwcsuite', 'upgraded_cluster'
    systemProperty 'tests.plugin_bwc_version', bwcVersion
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}1".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}1".getName()}")
}

// A bwc test suite which runs all the bwc tasks combined
task bwcTestSuite(type: StandaloneRestIntegTestTask) {
    exclude '**/*Test*'
    exclude '**/*IT*'
    dependsOn tasks.named("${baseName}#mixedClusterTask")
    dependsOn tasks.named("${baseName}#rollingUpgradeClusterTask")
    dependsOn tasks.named("${baseName}#fullRestartClusterTask")
}

run {
    doFirst {
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            cluster.waitForAllConditions()
        }
    }
    useCluster testClusters.integTest
}

// Only apply jacoco test coverage if we are running a local single node cluster
if (!usingRemoteCluster && !usingMultiNode) {
    apply from: '../build-tools/opensearchplugin-coverage.gradle'
}

apply from: '../build-tools/pkgbuild.gradle'
