/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.security.GeneralSecurityException
import java.security.cert.X509Certificate
import java.util.concurrent.Callable
import java.util.concurrent.TimeUnit
import java.util.function.Predicate
import java.util.stream.Collectors
import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection
import javax.net.ssl.SSLContext
import javax.net.ssl.SSLSession
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import org.opensearch.gradle.test.RestIntegTestTask
import org.opensearch.gradle.testclusters.OpenSearchCluster
import org.opensearch.gradle.testclusters.StandaloneRestIntegTestTask

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.pluginzip'
apply plugin: 'jacoco'

def usingRemoteCluster = System.properties.containsKey('tests.rest.cluster') || System.properties.containsKey('tests.cluster')
def usingMultiNode = project.properties.containsKey('numNodes')

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')

    // Retrieve sample security plugin files for security tests
    ['esnode.pem', 'esnode-key.pem', 'kirk.pem', 'kirk-key.pem', 'root-ca.pem', 'sample.pem', 'test-kirk.jks'].forEach { file ->
        File local = getLayout().getBuildDirectory().file(file).get().getAsFile()
        download.run {
            src "https://raw.githubusercontent.com/opensearch-project/security/refs/heads/main/bwc-test/src/test/resources/security/" + file
            dest local
            overwrite false
        }
        processResources {
            from(local)
        }
    }
}

opensearchplugin {
    name 'opensearch-alerting'
    description 'Amazon OpenSearch alerting plugin'
    classname 'org.opensearch.alerting.AlertingPlugin'
    extendedPlugins = ['lang-painless']
}

publishing {
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
                name = "opensearch-alerting"
                description = "OpenSearch Alerting plugin"
                groupId = "org.opensearch.plugin"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "OpenSearch"
                        url = "https://github.com/opensearch-project/alerting"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "Snapshots"
            url = "https://aws.oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username "$System.env.SONATYPE_USERNAME"
                password "$System.env.SONATYPE_PASSWORD"
            }
        }
    }
}

// Prefer elastic bundled versions for conflicts (primarily with AWS SDK).  We need to specify these manually because
// opensearchplugin sets ResolutionStrategy.failOnVersionConflict. Luckily it is also nice enough to expose (most of) the
// versions it uses in ext.versions.

configurations.all {
    if (it.state != Configuration.State.UNRESOLVED) return
    resolutionStrategy {
        force "joda-time:joda-time:${versions.joda}"
        force "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
        force "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"
        force "commons-logging:commons-logging:${versions.commonslogging}"
        // force the version until OpenSearch upgrade to an invulnerable one, https://www.whitesourcesoftware.com/vulnerability-database/WS-2019-0379
        force "commons-codec:commons-codec:1.13"

        force "org.slf4j:slf4j-api:${versions.slf4j}" //Needed for http5
        
        // This is required because kotlin-coroutines-core 1.1.1 still requires kotlin stdlib 1.3.20 and we're using a higher kotlin version
        force "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
        force "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    }
}

configurations.testImplementation {
    exclude module: "securemock"
}

configurations {
    opensearchPlugin
    zipArchive
}

// This flag indicates the existence of security plugin
def securityEnabled = System.getProperty("security", "false") == "true" || System.getProperty("https", "false") == "true"

// Always be minimumCompatibilityVersion of current opensearch version(3.0.0)
// get latest 2.x version from OpenSearch 2.x branch
static def fetchVersionProperties() {
    def url = 'https://raw.githubusercontent.com/opensearch-project/OpenSearch/refs/heads/2.x/buildSrc/version.properties'
    def content = new URL(url).text
    // Use regex to extract the version number
    def matcher = content =~ /opensearch\s*=\s*(\d+\.\d+\.\d+)/
    if (matcher.find()) {
        def version = matcher.group(1)
        println("Extracted latest 2.x version: $version")
        return version
    } else {
        return "2.19.0"
    }
}
String bwcVersionShort = fetchVersionProperties()
def bwcVersion = bwcVersionShort + ".0"
def bwcOpenSearchVersion = bwcVersionShort + "-SNAPSHOT"
def bwcPluginVersion = bwcVersion + "-SNAPSHOT"

dependencies {
    // Needed for integ tests
    zipArchive group: 'org.opensearch.plugin', name:'opensearch-notifications-core', version: "${opensearch_build}"
    zipArchive group: 'org.opensearch.plugin', name:'notifications', version: "${opensearch_build}"

    // Needed for security tests
    if (securityEnabled) {
        opensearchPlugin "org.opensearch.plugin:opensearch-security:${opensearch_build}@zip"
    }

    // Needed for BWC tests
    opensearchPlugin "org.opensearch.plugin:alerting:${bwcPluginVersion}@zip"

    compileOnly "org.opensearch.plugin:opensearch-scripting-painless-spi:${versions.opensearch}"
    api "org.opensearch.plugin:percolator-client:${opensearch_version}"

    // OpenSearch Nanny state
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    implementation "org.jetbrains:annotations:13.0"

    api project(":alerting-core")
    implementation "com.github.seancfoley:ipaddress:5.4.1"
    implementation project(path: ":alerting-spi", configuration: 'shadow')

    testImplementation "org.antlr:antlr4-runtime:${versions.antlr4}"
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.opensearch.plugin:reindex-client:${opensearch_version}"
    testImplementation "org.opensearch.plugin:parent-join-client:${opensearch_version}"
    testImplementation "org.opensearch.plugin:lang-painless:${opensearch_version}"
    testImplementation "org.opensearch.plugin:lang-mustache-client:${opensearch_version}"
}

javadoc.enabled = false // turn off javadoc as it barfs on Kotlin code
licenseHeaders.enabled = true
dependencyLicenses.enabled = false
// no need to validate pom, as this project is not uploaded to sonatype
validateNebulaPom.enabled = false
thirdPartyAudit.enabled = false

loggerUsageCheck.enabled = false

def opensearch_tmp_dir = rootProject.file('build/private/opensearch_tmp').absoluteFile
opensearch_tmp_dir.mkdirs()

test {
    systemProperty 'tests.security.manager', 'false'
}

task integTest(type: RestIntegTestTask) {
    description = "Run integration tests against integTest cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }
Zip bundle = (Zip) project.getTasks().getByName("bundlePlugin");
integTest.dependsOn(bundle)
integTest.getClusters().forEach{c -> c.plugin(project.getObjects().fileProperty().value(bundle.getArchiveFile()))}

def _numNodes = findProperty('numNodes') as Integer ?: 1

testClusters.integTest {
    testDistribution = "ARCHIVE"
    // Cluster shrink exception thrown if we try to set numberOfNodes to 1, so only apply if > 1
    if (_numNodes > 1) numberOfNodes = _numNodes
    // When running integration tests it doesn't forward the --debug-jvm to the cluster anymore
    // i.e. we have to use a custom property to flag when we want to debug opensearch JVM
    // since we also support multi node integration tests we increase debugPort per node
    if (System.getProperty("cluster.debug") != null) {
        def debugPort = 5005
        nodes.forEach { node ->
            node.jvmArgs("-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=${debugPort}")
            debugPort += 1
        }
    }

    plugin(provider({
        new RegularFile() {
            @Override
            File getAsFile() {
                return configurations.zipArchive.asFileTree.matching {
                    include '**/opensearch-notifications-core*'
                }.singleFile
            }
        }
    }))

    plugin(provider({
        new RegularFile() {
            @Override
            File getAsFile() {
                return configurations.zipArchive.asFileTree.matching {
                    include '**/notifications*'
                }.singleFile
            }
        }
    }))

    if (securityEnabled) {
        plugin(provider({
            new RegularFile() {
                @Override
                File getAsFile() {
                    return configurations.opensearchPlugin.resolvedConfiguration.resolvedArtifacts
                            .find { ResolvedArtifact f ->
                                f.name.startsWith("opensearch-security")
                            }
                            .file
                }
            }
        }))
    }
}

testClusters.integTest.nodes.each { node ->
    node.setting("plugins.destination.host.deny_list", "[\"10.0.0.0/8\", \"127.0.0.1\"]")

    if (securityEnabled) {
        node.extraConfigFile("kirk.pem", file("build/resources/main/kirk.pem"))
        node.extraConfigFile("kirk-key.pem", file("build/resources/main/kirk-key.pem"))
        node.extraConfigFile("esnode.pem", file("build/resources/main/esnode.pem"))
        node.extraConfigFile("esnode-key.pem", file("build/resources/main/esnode-key.pem"))
        node.extraConfigFile("root-ca.pem", file("build/resources/main/root-ca.pem"))
        node.setting("plugins.security.ssl.transport.pemcert_filepath", "esnode.pem")
        node.setting("plugins.security.ssl.transport.pemkey_filepath", "esnode-key.pem")
        node.setting("plugins.security.ssl.transport.pemtrustedcas_filepath", "root-ca.pem")
        node.setting("plugins.security.ssl.transport.enforce_hostname_verification", "false")
        node.setting("plugins.security.ssl.http.enabled", "true")
        node.setting("plugins.security.ssl.http.pemcert_filepath", "esnode.pem")
        node.setting("plugins.security.ssl.http.pemkey_filepath", "esnode-key.pem")
        node.setting("plugins.security.ssl.http.pemtrustedcas_filepath", "root-ca.pem")
        node.setting("plugins.security.allow_unsafe_democertificates", "true")
        node.setting("plugins.security.allow_default_init_securityindex", "true")
        node.setting("plugins.security.authcz.admin_dn", "\n - CN=kirk,OU=client,O=client,L=test,C=de")
        node.setting("plugins.security.audit.type", "internal_opensearch")
        node.setting("plugins.security.enable_snapshot_restore_privilege", "true")
        node.setting("plugins.security.check_snapshot_restore_write_privileges", "true")
        node.setting("plugins.security.restapi.roles_enabled", "[\"all_access\", \"security_rest_api_access\"]")
        node.setting("plugins.security.system_indices.enabled", "true")
    }
}

integTest {
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', opensearch_tmp_dir.absolutePath

    systemProperty 'buildDir', buildDir.path
    systemProperty "https", System.getProperty("https")
    systemProperty "security", System.getProperty("security")
    systemProperty "user", System.getProperty("user", "admin")
    systemProperty "password", System.getProperty("password", "admin")

    // The 'doFirst' delays till execution time.
    doFirst {
        // Tell the test JVM if the cluster JVM is running under a debugger so that tests can
        // use longer timeouts for requests.
        def isDebuggingCluster = getDebug() || System.getProperty("test.debug") != null
        systemProperty 'cluster.debug', isDebuggingCluster
        // Set number of nodes system property to be used in tests
        systemProperty 'cluster.number_of_nodes', "${_numNodes}"
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            waitForClusterSetup(cluster, securityEnabled)
        }
    }

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=8000'
    }

    if (System.getProperty("tests.rest.bwcsuite") == null) {
        filter {
            excludeTestsMatching "org.opensearch.alerting.bwc.*IT"
        }
    }
}

task integTestRemote(type: RestIntegTestTask) {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', opensearch_tmp_dir.absolutePath

    systemProperty "https", System.getProperty("https")
    systemProperty "security", System.getProperty("security")
    systemProperty "user", System.getProperty("user")
    systemProperty "password", System.getProperty("password")

    if (System.getProperty("tests.rest.cluster") != null) {
        filter {
            includeTestsMatching "org.opensearch.alerting.resthandler.*IT"
        }
    }

    if (System.getProperty("https") == null || System.getProperty("https") == "false") {
        filter {
            excludeTestsMatching "org.opensearch.alerting.resthandler.Secure*IT"
        }
    }
}
integTestRemote.enabled = System.getProperty("tests.rest.cluster") != null

String baseName = "alertingBwcCluster"
2.times {i ->
    testClusters {
        "${baseName}$i" {
            testDistribution = "ARCHIVE"
            versions = [bwcOpenSearchVersion, opensearch_version]
            numberOfNodes = 3
            plugin(provider(new Callable<RegularFile>(){
                @Override
                RegularFile call() throws Exception {
                    return new RegularFile() {
                        @Override
                        File getAsFile() {
                            return configurations.zipArchive.asFileTree.matching {
                                include '**/alerting*'
                            }.singleFile
                        }
                    }
                }
            }))
            setting 'path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
            setting 'http.content_type.required', 'true'
        }
    }
}

List<Provider<RegularFile>> plugins = []

// Ensure the artifact for the current project version is available to be used for the bwc tests
task prepareBwcTests {
    dependsOn bundle
    doLast {
        plugins = [
                project.getObjects().fileProperty().value(bundle.getArchiveFile()),
                provider({
                    new RegularFile() {
                        @Override
                        File getAsFile() {
                            return configurations.zipArchive.asFileTree.matching {
                                include '**/opensearch-notifications-core*'
                            }.singleFile
                        }
                    }
                }),
                provider({
                    new RegularFile() {
                        @Override
                        File getAsFile() {
                            return configurations.zipArchive.asFileTree.matching {
                                include '**/notifications*'
                            }.singleFile
                        }
                    }
                })
        ]
    }
}

// Create two test clusters with 3 nodes of the old version
2.times {i ->
    task "${baseName}#oldVersionClusterTask$i"(type: StandaloneRestIntegTestTask) {
        dependsOn 'prepareBwcTests'
        useCluster testClusters."${baseName}$i"
        filter {
            includeTestsMatching "org.opensearch.alerting.bwc.*IT"
        }
        systemProperty 'tests.rest.bwcsuite', 'old_cluster'
        systemProperty 'tests.rest.bwcsuite_round', 'old'
        systemProperty 'tests.plugin_bwc_version', bwcVersion
        nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}$i".allHttpSocketURI.join(",")}")
        nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}$i".getName()}")
    }
}

// Upgrade one node of the old cluster to new OpenSearch version with upgraded plugin version.
// This results in a mixed cluster with 2 nodes on the old version and 1 upgraded node.
// This is also used as a one third upgraded cluster for a rolling upgrade.
task "${baseName}#mixedClusterTask"(type: StandaloneRestIntegTestTask) {
    useCluster testClusters."${baseName}0"
    dependsOn "${baseName}#oldVersionClusterTask0"
    doFirst {
        testClusters."${baseName}0".upgradeNodeAndPluginToNextVersion(plugins)
    }
    filter {
        includeTestsMatching "org.opensearch.alerting.bwc.*IT"
    }
    systemProperty 'tests.rest.bwcsuite', 'mixed_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'first'
    systemProperty 'tests.plugin_bwc_version', bwcVersion
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}0".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}0".getName()}")
}

// Upgrade the second node to new OpenSearch version with upgraded plugin version after the first node is upgraded.
// This results in a mixed cluster with 1 node on the old version and 2 upgraded nodes.
// This is used for rolling upgrade.
task "${baseName}#twoThirdsUpgradedClusterTask"(type: StandaloneRestIntegTestTask) {
    dependsOn "${baseName}#mixedClusterTask"
    useCluster testClusters."${baseName}0"
    doFirst {
        testClusters."${baseName}0".upgradeNodeAndPluginToNextVersion(plugins)
    }
    filter {
        includeTestsMatching "org.opensearch.alerting.bwc.*IT"
    }
    systemProperty 'tests.rest.bwcsuite', 'mixed_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'second'
    systemProperty 'tests.plugin_bwc_version', bwcVersion
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}0".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}0".getName()}")
}

// Upgrade the third node to new OpenSearch version with upgraded plugin version after the second node is upgraded.
// This results in a fully upgraded cluster.
// This is used for rolling upgrade.
task "${baseName}#rollingUpgradeClusterTask"(type: StandaloneRestIntegTestTask) {
    dependsOn "${baseName}#twoThirdsUpgradedClusterTask"
    useCluster testClusters."${baseName}0"
    doFirst {
        testClusters."${baseName}0".upgradeNodeAndPluginToNextVersion(plugins)
    }
    filter {
        includeTestsMatching "org.opensearch.alerting.bwc.*IT"
    }
    mustRunAfter "${baseName}#mixedClusterTask"
    systemProperty 'tests.rest.bwcsuite', 'mixed_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'third'
    systemProperty 'tests.plugin_bwc_version', bwcVersion
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}0".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}0".getName()}")
}

// Upgrade all the nodes of the old cluster to new OpenSearch version with upgraded plugin version
// at the same time resulting in a fully upgraded cluster.
task "${baseName}#fullRestartClusterTask"(type: StandaloneRestIntegTestTask) {
    dependsOn "${baseName}#oldVersionClusterTask1"
    useCluster testClusters."${baseName}1"
    doFirst {
        testClusters."${baseName}1".upgradeAllNodesAndPluginsToNextVersion(plugins)
    }
    filter {
        includeTestsMatching "org.opensearch.alerting.bwc.*IT"
    }
    systemProperty 'tests.rest.bwcsuite', 'upgraded_cluster'
    systemProperty 'tests.plugin_bwc_version', bwcVersion
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}1".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}1".getName()}")
}

// A bwc test suite which runs all the bwc tasks combined
task bwcTestSuite(type: StandaloneRestIntegTestTask) {
    exclude '**/*Test*'
    exclude '**/*IT*'
    dependsOn tasks.named("${baseName}#mixedClusterTask")
    dependsOn tasks.named("${baseName}#rollingUpgradeClusterTask")
    dependsOn tasks.named("${baseName}#fullRestartClusterTask")
}

run {
    doFirst {
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            cluster.waitForAllConditions()
        }
    }
    useCluster testClusters.integTest
}

// Only apply jacoco test coverage if we are running a local single node cluster
if (!usingRemoteCluster && !usingMultiNode) {
    apply from: '../build-tools/opensearchplugin-coverage.gradle'
}

// Re-write WaitForHttpResource with updated code to support security plugin use case
class WaitForClusterYellow {

    private URL url
    private String username
    private String password
    Set<Integer> validResponseCodes = Collections.singleton(200)

    WaitForClusterYellow(String protocol, String host, int numberOfNodes) throws MalformedURLException {
        this(new URL(protocol + "://" + host + "/_cluster/health?wait_for_nodes=>=" + numberOfNodes + "&wait_for_status=yellow"))
    }

    WaitForClusterYellow(URL url) {
        this.url = url
    }

    boolean wait(int durationInMs) throws GeneralSecurityException, InterruptedException, IOException {
        final long waitUntil = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(durationInMs)
        final long sleep = 100

        IOException failure = null
        while (true) {
            try {
                checkResource()
                return true
            } catch (IOException e) {
                failure = e
            }
            if (System.nanoTime() < waitUntil) {
                Thread.sleep(sleep)
            } else {
                throw failure
            }
        }
    }

    void setUsername(String username) {
        this.username = username
    }

    void setPassword(String password) {
        this.password = password
    }

    void checkResource() throws IOException {
        final HttpURLConnection connection = buildConnection()
        connection.connect()
        final Integer response = connection.getResponseCode()
        if (validResponseCodes.contains(response)) {
            return
        } else {
            throw new IOException(response + " " + connection.getResponseMessage())
        }
    }

    HttpURLConnection buildConnection() throws IOException {
        final HttpURLConnection connection = (HttpURLConnection) this.@url.openConnection()

        if (connection instanceof HttpsURLConnection) {
            TrustManager[] trustAllCerts = [new X509TrustManager() {
                X509Certificate[] getAcceptedIssuers() {
                    return null
                }

                void checkClientTrusted(X509Certificate[] certs, String authType) {
                }

                void checkServerTrusted(X509Certificate[] certs, String authType) {
                }
            }
            ] as TrustManager[]
            SSLContext sc = SSLContext.getInstance("SSL")
            sc.init(null, trustAllCerts, new java.security.SecureRandom())
            connection.setSSLSocketFactory(sc.getSocketFactory())
            // Create all-trusting host name verifier
            HostnameVerifier allHostsValid = new HostnameVerifier() {
                boolean verify(String hostname, SSLSession session) {
                    return true
                }
            }
            // Install the all-trusting host verifier
            connection.setHostnameVerifier(allHostsValid)
        }

        configureBasicAuth(connection)
        connection.setRequestMethod("GET")
        return connection
    }

    void configureBasicAuth(HttpURLConnection connection) {
        if (username != null) {
            if (password == null) {
                throw new IllegalStateException("Basic Auth user [" + username + "] has been set, but no password has been configured")
            }
            connection.setRequestProperty(
                    "Authorization",
                    "Basic " + Base64.getEncoder().encodeToString((username + ":" + password).getBytes(StandardCharsets.UTF_8))
            )
        }
    }

}

def waitForClusterSetup(OpenSearchCluster cluster, Boolean securityEnabled) {
    cluster.@waitConditions.clear()
    String unicastUris = cluster.nodes.stream().flatMap { node ->
        node.getAllTransportPortURI().stream()
    }.collect(Collectors.joining("\n"))
    cluster.nodes.forEach { node ->
        try {
            Files.write(node.getConfigDir().resolve("unicast_hosts.txt"), unicastUris.getBytes(StandardCharsets.UTF_8))
        } catch (IOException e) {
            throw new java.io.UncheckedIOException("Failed to write configuation files for " + this, e)
        }
    }

    Predicate pred = {
        String protocol = securityEnabled ? "https" : "http"
        String host = System.getProperty("tests.cluster", cluster.getFirstNode().getHttpSocketURI())
        WaitForClusterYellow wait = new WaitForClusterYellow(protocol, host, cluster.nodes.size())
        wait.setUsername(System.getProperty("user", "admin"))
        wait.setPassword(System.getProperty("password", "admin"))
        return wait.wait(180000)
    }

    cluster.@waitConditions.put("cluster health yellow", pred)
    cluster.waitForAllConditions()
}

apply from: '../build-tools/pkgbuild.gradle'
